Testing
	Working test
		curl -i -v -H "Authorization: Bearer ya29.c.Ko4B4AdGrCaL70mj63gWploZ3Y06CYZvAupwKVFWXEPlV12KmRPGzra8Obs6mOASLjQO8XMhcF0-fT2NiHZdCbBSfHJ6zzYKLzhNqp_U7VrpRTr5ZLrIO9rCFqjnQ9nYodgdhVvOO3y_PhNc0Z1F2gdl7o0eqM9QZ64OtqB7dqHpMkJJ-5PKt4DDTiu_yM5Wvw" -H "Accept: application/json" -H "x-goog-api-client: gl-php/7.4.3 gdcl/2.4.0" -H "host: www.googleapis.com" -H "content-type: application/json" -H "user-agent: Google Drive API Video Uploader google-api-php-client/2.4.0" https://www.googleapis.com/drive/v3/files
Issues
	Directory Double Check
		OK, as is, would be nice to get rid the double check, though
		Why the double hit?
			first is check the amount owned by 'me'
			second is all files on server
		Why 0 the first time?
			0 is the amount owned by 'me'
		Can it be optimized?
			??
				The first is there to remove abandoned files
				Probably need to investigate / test more

			1iGwePlkxdI-phn_2cIIImhnnEaciqBgO (Data) count: 0
			1iGwePlkxdI-phn_2cIIImhnnEaciqBgO (Data) count: 5
	Attempting to delete a file not owned by me
		[2024-08-27 15:06:30 WRN] Attempting to delete a file not owned by me: Zenlok.pst
		Attempting to delete a file not owned by me: Entertainment
		Attempting to delete a file not owned by me: .iTunes Preferences.plist
	Root Folder Not Being Checked for Deletion
		Example
			"DriveParentFolderId": "1-9jnAmtWFxDeQ5HcH5B5ChyA43QzWGnh",
			"Path": "%USERPROFILE%/Data/ProgramData/Email/EmailStores/PstExports",
			"Excludes":
			[
				{
					"Path": "*.tmp",
					"ExcludeType": 3
				}
			]
	User rate limit exceeded. [403]
		[2025-01-16 20:19:52 ERR] Exception at: BackUp: Line: 559
		The service drive has thrown an exception.
		HttpStatusCode is Forbidden.
		Google.Apis.Requests.RequestError
		User rate limit exceeded. [403]
		Errors [
			Message[User rate limit exceeded.] Location[ - ] Reason[userRateLimitExceeded] Domain[usageLimits]
		]
		Google.GoogleApiException: The service drive has thrown an exception. HttpStatusCode is Forbidden. User rate limit exceeded.
		   at Google.Apis.Requests.ClientServiceRequest`1.ParseResponse(HttpResponseMessage response)
		   at Google.Apis.Requests.ClientServiceRequest`1.Execute()
		   at DigitalZenWorks.BackUp.Library.GoogleDrive.CreateFolder(String parent, String folderName) in C:\Users\JamesMc\Data\Clients\DigitalZenWorks\BackUpManager\SourceCode\BackUp.Library\GoogleDrive.cs:line 177
		   at DigitalZenWorks.BackUp.Library.GoogleDrive.GetServerFolder(String driveParentId, String path, IList`1 serverFiles) in C:\Users\JamesMc\Data\Clients\DigitalZenWorks\BackUpManager\SourceCode\BackUp.Library\GoogleDrive.cs:line 423
		   at DigitalZenWorks.BackUp.Library.GoogleServiceAccount.BackUp(String driveParentId, String path, IList`1 serverFiles, IList`1 excludes) in SourceCode\BackUp.Library\GoogleServiceAccount.cs:line 501
Json Configuration File
	Top	Service Account
		Sub Top Key	The immediate directory to be backed up
			"DriveParentFolderId": "1iGwePlkxdI-phn_2cIIImhnnEaciqBgO",
			"Path": "%USERPROFILE%/Data/External",
			Excludes
Async Version
	System.Threading.Tasks.TaskCanceledException
	ObjectDisposedException

	for each file
		while processing list at max
			wait
		start processing
		add file to processing list

	when any
		processing list --
Google Drive
	Finding RootSharedFolderId (aka Parent)
		You need to manually open up your google drive account in a browser, then navigate to the folder where you want to be root shard folder and click share.  Add your service account email address there.  Also, copy the core part of the shared link, that is the RootSharedFolderId.
Resources
	Google Drive
		https://developers.google.com/api-client-library/dotnet/guide/media_upload#:~:text=The%20default%20chunk%20size%20is,to%20any%20multiple%20of%20256KB.
		https://developers.google.com/drive/api/v3/about-auth
		https://stackoverflow.com/questions/41587763/how-to-provide-credentials-programmatically-to-use-google-drive-api-in-c-sharp-o
		https://github.com/LindaLawton/Google-Dotnet-Samples/blob/Genreated-samples1.0/Drive%20API/v3/FilesSample.cs
		https://developers.google.com/gdata/articles/debugging_client_libs
Class Hierarchy
	public class UpdateMediaUpload : Google.Apis.Upload.ResumableUpload<Google.Apis.Drive.v3.Data.File, Google.Apis.Drive.v3.Data.File>
	public class CreateMediaUpload : Google.Apis.Upload.ResumableUpload<Google.Apis.Drive.v3.Data.File, Google.Apis.Drive.v3.Data.File>
	Provide configuration for back up service from client (program.cs)
Program Flow
	Program
		BackUp.Run
			LoadAccounts
			for each account
				account backup
					Authorize
					for each drive mapping
						BackUp	driveParentFolderId	path	serverFiles	Excludes
	Program::Main
		BackUpService::BackUp(configurationFile)
Process Flow
	Main
		backUpService.BackUp
			account.BackUp.
				foreach (DriveMapping driveMapping in Account.DriveMappings)
API
	BackUp(
		IService Service	An instanciation of the IService Interface
		string PathName	Directory Path to Back Up
		Location BackUpLocation	An indicator Id of the Destination of Back Up
	BackUp(
		BackUpDirectory A Directory Path to Back Up along with a List of Sub-Directory Excludes


	IService
		Properties
			Name	/	Type
		Methods
			Authorize
			BackUp
	BackUpDirectory
		string PathName	Directory Path to Back Up
		IList<Excludes> Excludes	A List of Sub-Directory Excludes
Excluded items	These are items that should be ignored, not processed, not backed up, such as temporary generated files
	If these exist on the server, and owned by me, should be then deleted
Abandoned items	There are times that exist on the server but not in the current processed directory.
	If these are owned by me and are not marked as keep, should be then deleted
Interfaces
	Here's an example of how you might use C# to interface with OneDrive and Google Drive for a backup library:
		OneDrive:
			using Microsoft.Graph;
			using Microsoft.Identity.Client;
			using System;
			using System.IO;
			using System.Threading.Tasks;

			public class OneDriveBackupService
			{
				private readonly GraphServiceClient _graphClient;

				public OneDriveBackupService(string clientId, string tenantId, string clientSecret)
				{
					var confidentialClientApplication = ConfidentialClientApplicationBuilder
						.Create(clientId)
						.WithTenantId(tenantId)
						.WithClientSecret(clientSecret)
						.Build();

					var authProvider = new ClientCredentialProvider(confidentialClientApplication);

					_graphClient = new GraphServiceClient(authProvider);
				}

				public async Task UploadFile(string filePath, string destinationFolderId)
				{
					var fileName = Path.GetFileName(filePath);
					var stream = new FileStream(filePath, FileMode.Open);

					await _graphClient.Me.Drive.Items[destinationFolderId]
						.ItemWithPath(fileName)
						.Content
						.Request()
						.PutAsync<DriveItem>(stream);
				}
			}	
		Google Drive:
			using Google.Apis.Auth.OAuth2;
			using Google.Apis.Drive.v3;
			using Google.Apis.Services;
			using System.IO;
			using System.Threading.Tasks;

			public class GoogleDriveBackupService
			{
				private readonly DriveService _driveService;

				public GoogleDriveBackupService(string applicationName, string credentialsFilePath)
				{
					var credentials = GoogleCredential.FromFile(credentialsFilePath)
						.CreateScoped(DriveService.ScopeConstants.Drive);

					_driveService = new DriveService(new BaseClientService.Initializer()
					{
						HttpClientInitializer = credentials,
						ApplicationName = applicationName
					});
				}

				public async Task UploadFile(string filePath, string destinationFolderId)
				{
					var fileName = Path.GetFileName(filePath);
					var fileMetadata = new Google.Apis.Drive.v3.Data.File()
					{
						Name = fileName,
						Parents = new[] { destinationFolderId }
					};

					using var stream = new FileStream(filePath, FileMode.Open);

					await _driveService.Files.Create(fileMetadata, stream, "application/octet-stream")
						.UploadAsync();
				}
			}
		Interface
			public interface IBackupService
			{
				Task UploadFile(string filePath, string destinationFolderId);
			}



			public class OneDriveBackupService : IBackupService
			{
				// Implementation for OneDrive
			}

			public class GoogleDriveBackupService : IBackupService
			{
				// Implementation for Google Drive
			}


			var backupServices = new List<IBackupService>
			{
				new OneDriveBackupService(clientId, tenantId, clientSecret),
				new GoogleDriveBackupService(applicationName, credentialsFilePath)
			};

			foreach (var backupService in backupServices)
			{
				await backupService.UploadFile(filePath, destinationFolderId);
			}
BackUpManager
	Authorize() Alternatives
		Environment.SetEnvironmentVariable(
			Option #1
			"GOOGLE_APPLICATION_CREDENTIALS", credentialsFile);
			Option #2
				using var cts = new CancellationTokenSource();

				GoogleCredential serviceAccountCredential =
					await CredentialFactory.FromFileAsync<GoogleCredential>(
						credentialsFile, cts.Token).ConfigureAwait(false);

				GoogleCredential credential =
					CredentialFactory.FromFileAsync<GoogleCredential>(
						credentialsFile, cts.Token)
											 .CreateScoped(scopes)
											 .ToGoogleCredential();

				//var some = serviceAccountCredential.ToGoogleCredential();

				//GoogleCredential credential = serviceAccountCredential
				//	.ToGoogleCredential()
				//	.CreateScoped(scopes);

				//var factory = new CredentialFactory();
			Option #3
				string text = File.ReadAllText(credentialsFile);
				using FileStream stream = new FileStream(
					credentialsFile, FileMode.Open, FileAccess.Read);

				using var cts = new CancellationTokenSource();

				var accounts = JsonConvert.DeserializeObject<JsonCredentialParameters>(
					text);
				if (accounts.Type != "service_account" ||
					string.IsNullOrEmpty(accounts.ClientEmail) ||
					string.IsNullOrEmpty(accounts.PrivateKey))
				{
					Log.Warning(logger, "GetFiles: parent is empty", null);
				}


	Issues
		Inner Exception 1:	InvalidOperationException: The credential type Google.Apis.Auth.OAuth2.ServiceAccountCredential is not compatible with the requested type Google.Apis.Auth.OAuth2.GoogleCredential
 Google Source Code
	https://github.com/googleapis/google-api-dotnet-client/blob/main/Src/Generated/Google.Apis.Drive.v3/Google.Apis.Drive.v3.cs
